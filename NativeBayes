import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_predict
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix,
precision_score, recall_score, f1_score, precision_recall_curve
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt
# Step 1: Load your data
df = pd.read_csv('C:\\Users\\ethan\\Downloads\\reviews, sentiment -
Review, Sentiment - Sheet1 (2).csv')
30
# Assuming your CSV has columns 'review' for the review text and
'sentiment' for the sentiment
# Step 2: Preprocess the data (Basic preprocessing included in
Vectorization)
X_train, X_test, y_train, y_test = train_test_split(df[f['reviews'],
df['sentiment'], test_size=0.2, random_state=42)
# Step 3: Vectorize the text data
vectorizer = TfidfVectorizer(stop_words='english', max_features=10000)
# Step 4: Train the Naive Bayes Model
model = make_pipeline(vectorizer, MultinomialNB())
model.fit(X_train, y_train)
# Step 5: Evaluate the Model
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
precision = precision_score(y_test, predictions, average='weighted')
recall = recall_score(y_test, predictions, average='weighted')
f1 = f1_score(y_test, predictions, average='weighted')
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Confusion Matrix:\n", confusion_matrix(y_test, predictions))
# Step 6: Plot Precision-Recall Curve
y_scores = cross_val_predict(model, X_test, y_test, cv=3,
method="predict_proba")[:, 1]
precisions, recalls, thresholds = precision_recall_curve(y_test, y_scores)plt.figure(figsize=(8, 6))
plt.plot(recalls, precisions, "b-", linewidth=2)
plt.xlabel("Recall", fontsize=16)
plt.ylabel("Precision", fontsize=16)
plt.title('Precision-Recall Curve', fontsize=18)
plt.grid(True)
plt.show()
